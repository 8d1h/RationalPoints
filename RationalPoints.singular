///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// utility function that lists all elements in the ground field
proc listFieldElements() {
    int k;
    def ch = char(basering);
    def els = list();
    if (npars(basering)==0) { // Fp for p prime
        for (k=ch;k>0;k--) { els[k] = k-1; }
    } else { // Fq defined by a minpoly
        def fct = factorize(var(1)^(ch^pardeg(minpoly))-var(1),1);
        for (k=size(fct);k>=1;k--) {
            els[k] = list(-coeffs(fct[k],var(1))[1][1]);
        }
    }
    return(els);
}
///////////////////////////////////////////////////////////////////////////////
// enumerate points coordinate by coordinate using elimination
// i: the current coordinate to enumerate
// part: partially determined coordinates
// els: elements of the field
proc enumPoints(ideal I,int i,list part,list els) {
    int k; ideal I1;
    list ans = list();
    def n = nvars(basering);
    def rest = poly(1);
    for (k=i+1;k<=n;k++) { rest = rest*var(k); }
    def g = eliminate(I,rest)[1];
    if (g!=0) { // when the eliminant is non-trivial, only enumerate its zeros
        vector cc; poly v;
        def fct = factorize(g,1);
        for (k=1;k<=size(fct);k++) {
            if (deg(fct[k])==1) {
                I1 = std(reduce(I,fct[k]));
                cc = coeffs(fct[k],var(i))[1];
                part[i] = -cc[1]/cc[2];
                if (i==n) { ans = ans + list(part); }
                else { ans = ans + enumPoints(I1,i+1,part,els); }
            }
            // this can help find the splitting field
            // else { printf("  // %p", fct[k]); }
        }
    } else { // otherwise enumerate over the entire field
        poly f;
        for (k=1;k<=size(els);k++) {
            f = var(i)-els[k];
            I1 = std(subst(I,var(i),els[k]));
            if (dim(I1)>-1) {
                part[i] = els[k];
                if (i==n) { ans = ans + list(part); }
                else { ans = ans + enumPoints(I1,i+1,part,els); }
            }
        }
    }
    return(ans);
}
///////////////////////////////////////////////////////////////////////////////
// enumerate points on a homogeneous ideal
proc enumProjPoints(ideal I,int i,list part,list els) {
    int j; int k; ideal I1;
    list ans = list();
    def n = nvars(basering);
    for (k=i;k<=n;k++) { // find points of the form (1,..), (0,1,..), etc.
        I1 = I;
        for (j=i;j<k;j++) {
            part[j] = 0;
            I1 = subst(I1,var(j),0);
        }
        part[i] = 1;
        I1 = std(subst(I1,var(k),1));
        if (dim(I1)>-1) {
            if (k==n) { ans = ans + list(part); }
            else { ans = ans + enumPoints(I1,k+1,part,els); }
        }
    }
    return(ans);
}
///////////////////////////////////////////////////////////////////////////////
// main interface
proc points(ideal I) {
    if (char(basering)==0 and dim(I) > 0) { ERROR("over number fields the ideal must be 0-dimensional")};
    return(enumPoints(I,1,list(),listFieldElements()));
}
///////////////////////////////////////////////////////////////////////////////
proc projPoints(ideal I) {
    if (!homog(I)) { ERROR("the ideal is not homogeneous"); }
    if (char(basering)==0 and dim(I) > 1) { ERROR("over number fields the ideal must be 0-dimensional")};
    return(enumProjPoints(I,1,list(),listFieldElements()));
}
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// This example is from the online documentation of Magma.
// http://magma.maths.usyd.edu.au/magma/handbook/text/1354#14952
// It's a rational curve with one cusp.
// Magma can complete it in 2s...

ring R1 = 7823,(x,y,z,w),dp;
ideal I = 4*x*z + 2*x*w + y^2 + 4*y*w + 7821*z^2 + 7820*w^2,
4*x^2 + 4*x*y + 7821*x*w + 7822*y^2 + 7821*y*w + 7821*z^2 + 7819*z*w + 7820*w^2;

///////////////////////////////////////////////////////////////////////////////
// This example is the Togliatti surface which admits 31 nodes (the maximal
// number possible).
// The set of nodes is a 0-dimensional variety.

ring R2 = (0,q),(x,y,z,w),dp;
minpoly = q8-40q6+230q4-200q2+25;
poly s = (1/15)*q7-(53/20)*q5+(44/3)*q3-(109/12)*q;
// minpoly = q16-q12+q8-q4+1;
// poly s = 2q13-q9-q7+q5-q3-q;
ideal Togliatti = 64*(x-w)*(x^4 -4*x^3*w -10*x^2*y^2 -4*x^2*w^2 +16*x*w^3 -20*x*y^2*w+5*y^4 +16*w^4 -20*y^2*w^2) -5*s*(2*z -s*w)*(4*(x^2+y^2-z^2) +(1+3*(5-s^2))*w^2)^2;
matrix Jac = jacob(Togliatti);
ideal I = std(Togliatti+Jac);

timer = 0; number t=timer;

print(size(projPoints(std(I))));

// LIB "ffsolve.lib";
// print(ffsolve(std(Kummer)));

// LIB "zeroset.lib";
// def T = zeroSet(I1);
// setring T;
// print(theZeroset);

printf("// time: %ps",timer-t);
exit;
///////////////////////////////////////////////////////////////////////////////
